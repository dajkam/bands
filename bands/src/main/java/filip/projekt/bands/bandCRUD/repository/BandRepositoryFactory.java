package filip.projekt.bands.bandCRUD.repository;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

import filip.projekt.bands.bandCRUD.domain.Band;
import  filip.projekt.bands.bandCRUD.repository.BandRepository;
public class BandRepositoryFactory implements BandRepository{

  private Connection con;
  private PreparedStatement addSt;
  private PreparedStatement getAllSt;
  private PreparedStatement deleteFromBandSt;
  private PreparedStatement selectFromBandSt;
  private PreparedStatement updateBandSt;
  private PreparedStatement deleteAllSt;


  public BandRepositoryFactory (Connection con) throws SQLException {
    this.con = con;
    if (!isDataBaseReady()) {
      createTableBand();
    }
  }
  public BandRepositoryFactory() throws SQLException{}


	private boolean isDataBaseReady() {
    try {
      ResultSet rs = con.getMetaData().getTables(null,null,null,null);
      boolean tabExists = false;
      while (rs.next()) {
        if ("Band".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tabExists = true;
					break;
					
				}
      }
      return tabExists;
    } catch (SQLException e) {
      return false;
    }
}

	@Override
	public Connection getConnection() {
		return con;
	}

	@Override
	public void setConnection(Connection con) throws SQLException {
		this.con = con;
		addSt = con.prepareStatement("INSERT INTO Band()VALUES(?,?)",Statement.RETURN_GENERATED_KEYS);
		getAllSt = con.prepareStatement("SELECT * FROM Band ORDER BY _Id");
		selectFromBandSt = con.prepareStatement("SELECT FROM Band WHERE _Id=?");
		deleteFromBandSt = con.prepareStatement("DELETE FROM Band WHERE _Id=?");
		updateBandSt = con.prepareStatement("UPDATE Band SET /////// WHERE _Id=?");
		deleteAllSt = con.prepareStatement("DELETE FROM Band;");



	}
	

	

	@Override
	public List<Band> getAll() {
		List<Band> Band = new LinkedList<>()	;
		try {
			ResultSet rs = getAllSt.executeQuery();
			while (rs.next()) {
				Band b = new Band()	;
				b.set_Id(rs.getInt("_Id"));
				b.set_Name(rs.getString("_Name"));
				b.set_Genre(rs.getString("_Genre"));
				b.set_NumberOfMembers(rs.getInt("_NumberOfMembers"));

				Band.add(b);			
			}
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage()+"\n"+e.getStackTrace().toString());
		}
		return Band;
		
		
	}

	@Override
	public int add(Band b) {
		
		int count = 0;
		try {
			addSt.setString(1, b.get_Name());
			addSt.setString(2, b.get_Genre());
			addSt.setInt(3, b.get_NumberOfMembers());
			count = addSt.executeUpdate();
			ResultSet genKeys = addSt.getGeneratedKeys();
			if (genKeys.next()) {
				b.set_Id(genKeys.getInt(1));
				
			}

			
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		return count ;
		
	}

	@Override
	public Band getBy_Id(int _Id) throws SQLException {

		try {
			getAllSt.setInt(1, _Id);
			
			ResultSet rs = selectFromBandSt.executeQuery();
			
			if (rs.next()) 
			{
				Band b =  new Band();
				b.set_Id(rs.getInt("_Id"));
				b.set_Name(rs.getString("_Name"));
				b.set_Genre(rs.getString("_Genre"));
				b.set_NumberOfMembers(rs.getInt("_NumberOfMembers"));

				return b;
			} 
		
	}
	catch (SQLException e) {
		throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());

	}
	throw new SQLException("Zespół o identyfikarze "+ _Id + "Nie istnieje");
}


	@Override
	public String getInfo() {
		return "To jest program na potrzeby przedmiotu testowanie automatyczne";
	}

	@Override
	public void createTableBand() throws SQLException {
		con.createStatement().executeUpdate("CREATE TABLE " + "Band(_Id int GENERATED BY DEFAULT AS IDENTITY, "
												+ "_Name varchar(20) NOT NULL, " + "varchar(50) _Genre NOT NULL"+ "_NumberOfMembers int NOT NULL"+ ")");
												
		
	}

	@Override
	public void dropTableBand()throws SQLException {
		con.createStatement().executeUpdate("DROP TABLE Band");
		
	}

	@Override
	public Band selectFromBand(int _Id) throws SQLException {
		selectFromBandSt.setInt(1, _Id);
		ResultSet rs = selectFromBandSt.executeQuery();
		try{
		if (rs.next()) {
			Band b = new Band();
			b.set_Id(rs.getInt("_Id"));
			b.set_Name(rs.getString("_Name"));
			b.set_Genre(rs.getString("_Genre"));
			b.set_NumberOfMembers(rs.getInt("_NumberOfMembers"));
			return b;
			
		}
	}
	catch(SQLException e){
	throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
	}
	throw new SQLException("Osoba o id " + _Id + "nie istnieje");
}


	@Override
	public int deleteFromBand(Band b) {
		try {
			deleteAllSt.setInt(1, b.get_Id());
			return deleteFromBandSt.executeUpdate();
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());

		}
	}

	

	@Override
	public int updateBand(Band b) throws SQLException {
		int count = 0;
		try {
			updateBandSt.setString(1, b.get_Name() );
			updateBandSt.setInt(2, b.get_Id());
			updateBandSt.setString(3, b.get_Genre());
			updateBandSt.setInt(4, b.get_NumberOfMembers());

			count = updateBandSt.executeUpdate();
		} catch (SQLException e) {
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());

		}
		if (count <= 0) {
			throw new SQLException("Nie ma takiego zespołu w bazie danych do usunięcia");
			
		}


		return count;




  }
  
  public static BandRepository getInstance(){
    return null;
  }
@Override
public int deleteAll() {
	try {
		return deleteAllSt.executeUpdate();
	} catch (SQLException e) {
		throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
	}
}


}
